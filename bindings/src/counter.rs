pub use counter::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod counter {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("increment"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("increment"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("number"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("number"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("publicKey"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("publicKey"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setNumber"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setNumber"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_number"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setPublicKey"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setPublicKey"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_publicKey"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static COUNTER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\0\x1D\x90a\0_V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\09W=`\0\x80>=`\0\xFD[P`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\0lV[a\x1Af\x80a\x06^\x839\x01\x90V[a\x05\xE3\x80a\0{`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80cc\xFF\xAB1\x14a\0\\W\x80c\x83\x81\xF5\x8A\x14a\0zW\x80c\xA2\xC9h\xB4\x14a\0\x82W\x80c\xA9\x1DX\xB4\x14a\0\x97W\x80c\xD0\x9D\xE0\x8A\x14a\0\xAAW[`\0\x80\xFD[a\0da\0\xB2V[`@Qa\0q\x91\x90a\x02\x18V[`@Q\x80\x91\x03\x90\xF3[a\0da\x01@V[a\0\x95a\0\x906`\x04a\x02\xBAV[a\x01MV[\0[a\0\x95a\0\xA56`\x04a\x02\xBAV[a\x01]V[a\0\x95a\x01iV[`\x01\x80Ta\0\xBF\x90a\x03:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\xEB\x90a\x03:V[\x80\x15a\x018W\x80`\x1F\x10a\x01\rWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x018V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0\x80Ta\0\xBF\x90a\x03:V[`\0a\x01Y\x82\x82a\x03\xC3V[PPV[`\x01a\x01Y\x82\x82a\x03\xC3V[`\x02T`@Qcz\xAB\x8E=`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF5W\x1Cz\x90a\x01\x9F\x90`\x01\x90`\0\x90\x82\x90`\x04\x01a\x05\0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\xE4\x91\x90\x81\x01\x90a\x056V[`\0\x90a\x01\xF1\x90\x82a\x03\xC3V[PV[`\0[\x83\x81\x10\x15a\x02\x0FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x01\xF7V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x027\x81`@\x85\x01` \x87\x01a\x01\xF4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x02\x8AWa\x02\x8Aa\x02KV[`@R\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xACWa\x02\xACa\x02KV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02\xCCW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xE3W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x02\xF4W`\0\x80\xFD[\x805a\x03\x07a\x03\x02\x82a\x02\x92V[a\x02aV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x03\x1CW`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03nWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x03\xBEW`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x03\x9BWP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x03\xBAW\x82\x81U`\x01\x01a\x03\xA7V[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xDDWa\x03\xDDa\x02KV[a\x03\xF1\x81a\x03\xEB\x84Ta\x03:V[\x84a\x03tV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x04&W`\0\x84\x15a\x04\x0EWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03\xBAV[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x04UW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x046V[P\x85\x82\x10\x15a\x04sW\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0\x81Ta\x04\x90\x81a\x03:V[\x80\x85R` `\x01\x83\x81\x16\x80\x15a\x04\xADW`\x01\x81\x14a\x04\xC7Wa\x04\xF5V[`\xFF\x19\x85\x16\x88\x84\x01R\x83\x15\x15`\x05\x1B\x88\x01\x83\x01\x95Pa\x04\xF5V[\x86`\0R\x82`\0 `\0[\x85\x81\x10\x15a\x04\xEDW\x81T\x8A\x82\x01\x86\x01R\x90\x83\x01\x90\x84\x01a\x04\xD2V[\x89\x01\x84\x01\x96PP[PPPPP\x92\x91PPV[``\x81R`\0a\x05\x13``\x83\x01\x86a\x04\x83V[\x82\x81\x03` \x84\x01Ra\x05%\x81\x86a\x04\x83V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\0` \x82\x84\x03\x12\x15a\x05HW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05_W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05pW`\0\x80\xFD[\x80Qa\x05~a\x03\x02\x82a\x02\x92V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\x93W`\0\x80\xFD[a\x05\xA4\x82` \x83\x01` \x86\x01a\x01\xF4V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 H\xD6n5\xC5\x8DvC\x87\x14\xCA7\xFFU[\xCE\xF8\xE3\xD8\xFC\xCA4\xEB\xFB$$=N\x04Y0\x13dsolcC\0\x08\x13\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x1AF\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x04\xC2W`\x005`\xE0\x1C\x80c\x8B\x96=\x9B\x11a\x02xW\x80c\xBFT\xDA\x0C\x11a\x01\\W\x80c\xDC\xE9\xE4\xAD\x11a\0\xCEW\x80c\xEB#\x08<\x11a\0\x92W\x80c\xEB#\x08<\x14a\t\x03W\x80c\xED\xCA+\x83\x14a\t\x16W\x80c\xF51\x06r\x14a\t)W\x80c\xF5W\x1Cz\x14a\t<W\x80c\xF8\xCE\xFB&\x14a\tOW\x80c\xF9\x84\x8FP\x14a\tXW`\0\x80\xFD[\x80c\xDC\xE9\xE4\xAD\x14a\x08\xD1W\x80c\xE0\xC7\xFFj\x14a\x08\xE4W\x80c\xE3^\xDC\x91\x14a\x08\xEFW\x80c\xE7\xD5\xF1Y\x14a\x08\xF8W\x80c\xEAl\x90\x0E\x14a\x07&W`\0\x80\xFD[\x80c\xCDL\xB9\xA5\x11a\x01 W\x80c\xCDL\xB9\xA5\x14a\x08\x8CW\x80c\xD0\xDB\xB6\r\x14a\x08\x9FW\x80c\xD7\x85\xD6+\x14a\x07&W\x80c\xD8\xF5jQ\x14a\x08\xA8W\x80c\xDA\x8B\xDDU\x14a\x08\xB3W\x80c\xDA\xE5\x8D\xF8\x14a\x08\xC6W`\0\x80\xFD[\x80c\xBFT\xDA\x0C\x14a\x08EW\x80c\xC4x\xF3\x9B\x14a\x08XW\x80c\xC5#\r\xF9\x14a\x08cW\x80c\xC6oI\xCC\x14a\x08vW\x80c\xCC:\x96\t\x14a\x08\x81W`\0\x80\xFD[\x80c\xA271\x1E\x11a\x01\xF5W\x80c\xACf_\xF0\x11a\x01\xB9W\x80c\xACf_\xF0\x14a\x07\xEEW\x80c\xB0\x8Eb@\x14a\x08\x01W\x80c\xB2a\0G\x14a\x08\x0CW\x80c\xBA\x92\x9E\xEC\x14a\x08\x14W\x80c\xBBL\x13`\x14a\x08'W\x80c\xBB\xE6R?\x14a\x08:W`\0\x80\xFD[\x80c\xA271\x1E\x14a\x06\x0BW\x80c\xA3\xA5\xBFv\x14a\x07\xC5W\x80c\xA4\x1F\x83\xE4\x14a\x07\xD0W\x80c\xAAV\xB2\t\x14a\x07&W\x80c\xAC\x004g\x14a\x07\xE3W`\0\x80\xFD[\x80c\x96\x1CI\xDD\x11a\x02<W\x80c\x96\x1CI\xDD\x14a\x07\x94W\x80c\x96I\xF8.\x14a\x07\xA7W\x80c\x9F\x89$\x83\x14a\x07\xB2W\x80c\xA0iJM\x14a\x07\xBAW\x80c\xA1\t\xA9\xF5\x14a\x07&W`\0\x80\xFD[\x80c\x8B\x96=\x9B\x14a\x07_W\x80c\x8D\\\x17\\\x14a\x07jW\x80c\x8F\xF1\x9F:\x14a\x07uW\x80c\x90r\xD5$\x14a\x07~W\x80c\x91k</\x14a\x07\x89W`\0\x80\xFD[\x80cD>\xFE\x9E\x11a\x03\xAAW\x80cge\xEA\xB5\x11a\x03\x1CW\x80crZ\x87E\x11a\x02\xE0W\x80crZ\x87E\x14a\x06\x16W\x80cwc\xCA@\x14a\x07\x13W\x80cz\"\x7F\xE2\x14a\x07&W\x80c~\r\xBE'\x14a\x07.W\x80c\x83b\xF5)\x14a\x07AW\x80c\x8AE\xE6\xA6\x14a\x07TW`\0\x80\xFD[\x80cge\xEA\xB5\x14a\x06\xC4W\x80ci\x13(3\x14a\x06\xCFW\x80cm\x0E\xE6\x87\x14a\x06\xE2W\x80cn\xDF\xD6\x80\x14a\x06\xF5W\x80cp\t\x052\x14a\x07\0W`\0\x80\xFD[\x80cT\xC9P'\x11a\x03nW\x80cT\xC9P'\x14a\x06bW\x80c^\x84\xDC\x9C\x14a\x06uW\x80cc3\xF1F\x14a\x06\x80W\x80cc<\xC7g\x14a\x06\x93W\x80cd\xDFF\x05\x14a\x06\xA6W\x80cd\xFC2I\x14a\x06\xB1W`\0\x80\xFD[\x80cD>\xFE\x9E\x14a\x06\x16W\x80cIau\x1F\x14a\x06\x1EW\x80cL^\x1C\x88\x14a\x06)W\x80cQV\x85\x94\x14a\x06<W\x80cS\xCA\xC1!\x14a\x06OW`\0\x80\xFD[\x80c\x1B\xFA\xDE\xED\x11a\x04CW\x80c)\x16\xCE1\x11a\x04\x07W\x80c)\x16\xCE1\x14a\x05\xCCW\x80c,\xEA;M\x14a\x05\xD7W\x80c-\xF2\xE7\"\x14a\x05\xE2W\x80c/^\xB6\x1D\x14a\x05\xF5W\x80c;\xBC\xA8\xE9\x14a\x06\0W\x80cCpC\x81\x14a\x06\x0BW`\0\x80\xFD[\x80c\x1B\xFA\xDE\xED\x14a\x05uW\x80c!\xCF?\x96\x14a\x05\x88W\x80c$_1\x1D\x14a\x05\x9BW\x80c'\xF9\x1A\xD9\x14a\x05\xAEW\x80c(f\xCF\xFD\x14a\x05\xB9W`\0\x80\xFD[\x80c\n^N\xD2\x11a\x04\x8AW\x80c\n^N\xD2\x14a\x05.W\x80c\r\x85\xB4\xF0\x14a\x05AW\x80c\x0Fu4~\x14a\x05LW\x80c\x10\xDA>\\\x14a\x05WW\x80c\x13\x15P\x8B\x14a\x05bW`\0\x80\xFD[\x80c\x01(\x98\x10\x14a\x04\xC7W\x80c\x04(\xEB%\x14a\x04\xE5W\x80c\x08\x94b\xFE\x14a\x05\x05W\x80c\x08\x9F+j\x14a\x05\x10W\x80c\tV\x0Ey\x14a\x05#W[`\0\x80\xFD[a\x04\xD2c\xF0\0\x01\x11\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x04\xF8a\x04\xF36`\x04a\x14\x87V[a\tcV[`@Qa\x04\xDC\x91\x90a\x15\x1EV[a\x04\xD2c\xF0\0\x02\"\x81V[a\x04\xF8a\x05\x1E6`\x04a\x15cV[a\t\x7FV[a\x04\xD2c\xF0\0\x03\x01\x81V[a\x04\xF8a\x05<6`\x04a\x15\xA9V[a\t\x93V[a\x04\xD2c\xF0\0\x02\0\x81V[a\x04\xD2c\xF0\0\x03 \x81V[a\x04\xD2c\xF0\0\0\x01\x81V[a\x04\xF8a\x05p6`\x04a\x16\x03V[a\t\xA8V[a\x04\xF8a\x05\x836`\x04a\x15cV[a\t\xBCV[a\x04\xF8a\x05\x966`\x04a\x15\xA9V[a\t\xD0V[a\x04\xF8a\x05\xA96`\x04a\x15\xA9V[a\t\xE4V[a\x04\xD2c\xF0\0\x03\x10\x81V[a\x04\xF8a\x05\xC76`\x04a\x16vV[a\t\xF8V[a\x04\xD2c\xF0\0\x02\x10\x81V[a\x04\xD2c\xF0\0\x01\"\x81V[a\x04\xF8a\x05\xF06`\x04a\x16\xE2V[a\n\x0CV[a\x04\xD2c\xF0\0\x01\0\x81V[a\x04\xD2c\xF0\0\x02\x02\x81V[a\x04\xD2c\xF0\0\0\0\x81V[a\x04\xD2`\0\x81V[a\x04\xD2c\xF0\0\x03\x12\x81V[a\x04\xF8a\x0676`\x04a\x177V[a\n V[a\x04\xF8a\x06J6`\x04a\x16\x03V[a\n4V[a\x04\xF8a\x06]6`\x04a\x17\xB8V[a\nHV[a\x04\xF8a\x06p6`\x04a\x15\xA9V[a\n\\V[a\x04\xD2c\xF0\0\0\x10\x81V[a\x04\xF8a\x06\x8E6`\x04a\x177V[a\npV[a\x04\xF8a\x06\xA16`\x04a\x18\"V[a\n\x84V[a\x04\xD2c\xF0\0\0\x12\x81V[a\x04\xF8a\x06\xBF6`\x04a\x15cV[a\n\x98V[a\x04\xD2c\xF0\0\x01\x01\x81V[a\x04\xF8a\x06\xDD6`\x04a\x16\xE2V[a\n\xACV[a\x04\xF8a\x06\xF06`\x04a\x14\x87V[a\n\xC0V[a\x04\xD2c\xF0\0\x02\x01\x81V[a\x04\xF8a\x07\x0E6`\x04a\x15\xA9V[a\n\xD4V[a\x04\xF8a\x07!6`\x04a\x177V[a\n\xE8V[a\x04\xD2`\xC8\x81V[a\x04\xF8a\x07<6`\x04a\x15\xA9V[a\n\xFCV[a\x04\xF8a\x07O6`\x04a\x15\xA9V[a\x0B\x10V[a\x04\xD2c\xF0\0\x01!\x81V[a\x04\xD2c\xF0\0\x01 \x81V[a\x04\xD2c\xF0\0\x03\x11\x81V[a\x04\xD2a\x03\xE8\x81V[a\x04\xD2c\xF0\0\x03\"\x81V[a\x04\xD2c\xF0\0\x02\x12\x81V[a\x04\xF8a\x07\xA26`\x04a\x18\"V[a\x0B%V[a\x04\xD2c\xF0\0\x03\0\x81V[a\x04\xD2` \x81V[a\x04\xD2c\xF0\0\0\"\x81V[a\x04\xD2c\xF0\0\x01\x10\x81V[a\x04\xF8a\x07\xDE6`\x04a\x14\x87V[a\x0B9V[a\x04\xD2c\xF0\0\0\x02\x81V[a\x04\xF8a\x07\xFC6`\x04a\x16\x03V[a\x0BMV[a\x04\xD2c\xF0\0\x03\x02\x81V[a\x04\xD2`\x10\x81V[a\x04\xF8a\x08\"6`\x04a\x16vV[a\x0BaV[a\x04\xF8a\x0856`\x04a\x15\xA9V[a\x0BuV[a\x04\xD2c\xF0\0\0 \x81V[a\x04\xF8a\x08S6`\x04a\x17\xB8V[a\x0B\x89V[a\x04\xD2c\xF0\0\x02\x11\x81V[a\x04\xF8a\x08q6`\x04a\x16\xE2V[a\x0B\x9DV[a\x04\xD2c\xF0\0\x02!\x81V[a\x04\xD2c\xF0\0\x01\x02\x81V[a\x04\xF8a\x08\x9A6`\x04a\x15\xA9V[a\x0B\xB1V[a\x04\xD2a\x03\0\x81V[a\x04\xD2c\xF0\0\0\x11\x81V[a\x04\xF8a\x08\xC16`\x04a\x15\xA9V[a\x0B\xC5V[a\x04\xD2c\xF0\0\x02 \x81V[a\x04\xF8a\x08\xDF6`\x04a\x15\xA9V[a\x0B\xD9V[a\x04\xD2c\xF0\0\x01\x12\x81V[a\x04\xD2a\x02\0\x81V[a\x04\xD2c\xF0\0\x03!\x81V[a\x04\xF8a\t\x116`\x04a\x18\"V[a\x0B\xEEV[a\x04\xF8a\t$6`\x04a\x15\xA9V[a\x0C\x02V[a\x04\xF8a\t76`\x04a\x17\xB8V[a\x0C\x17V[a\x04\xF8a\tJ6`\x04a\x16vV[a\x0C+V[a\x04\xD2a\x01\0\x81V[a\x04\xD2c\xF0\0\0!\x81V[``a\twc\xF0\0\x03\x02`\xC8\x86\x86\x86a\x0C?V[\x94\x93PPPPV[``a\twc\xF0\0\x02\x12`\xC8\x86\x86\x86a\x0CfV[``a\twc\xF0\0\x01 a\x03\xE8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x02!`\xC8\x86\x86\x86a\x0C\x84V[``a\twc\xF0\0\x02\"`\xC8\x86\x86\x86a\x0CfV[``a\twc\xF0\0\x02\0`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\0\0`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\0\x11`\xC8\x86\x86\x86a\x0C\x93V[``a\twc\xF0\0\0\"`\xC8\x86\x86\x86a\x0C\xA2V[``a\twc\xF0\0\x03\x11`\xC8\x86\x86\x86a\x0C\xB1V[``a\twc\xF0\0\x02\x01`\xC8\x86\x86\x86a\x0C\x84V[``a\twc\xF0\0\x01\x01`\xC8\x86\x86\x86a\x0C\xC0V[``a\twc\xF0\0\x03\0`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x03\x01`\xC8\x86\x86\x86a\x0C\xB1V[``a\twc\xF0\0\x01\"`\xC8\x86\x86\x86a\x0C\xCFV[``a\twc\xF0\0\x02\x02`\xC8\x86\x86\x86a\x0CfV[``a\twc\xF0\0\0\x02`\xC8\x86\x86\x86a\x0C\xA2V[``a\twc\xF0\0\x03\x12`\xC8\x86\x86\x86a\x0C?V[``a\twc\xF0\0\x01\x10`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x03!`\xC8\x86\x86\x86a\x0C\xB1V[``a\twc\xF0\0\0\x10`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x03 a\x03\xE8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x01\x12`\xC8\x86\x86\x86a\x0C\xCFV[``a\twc\xF0\0\x03\"`\xC8\x86\x86\x86a\x0C?V[``a\twc\xF0\0\x02\x11`\xC8\x86\x86\x86a\x0C\x84V[``a\twc\xF0\0\0!`\xC8\x86\x86\x86a\x0C\x93V[``a\twc\xF0\0\x03\x10`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x01\x11`\xC8\x86\x86\x86a\x0C\xC0V[``a\twc\xF0\0\0\x12`\xC8\x86\x86\x86a\x0C\xA2V[``a\twc\xF0\0\x02\x10`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x01\0`\xC8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x02 a\x03\xE8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x01\x02`\xC8\x86\x86\x86a\x0C\xCFV[``a\twc\xF0\0\0 a\x03\xE8\x86\x86\x86a\x0CuV[``a\twc\xF0\0\x01!`\xC8\x86\x86\x86a\x0C\xC0V[``a\twc\xF0\0\0\x01`\xC8\x86\x86\x86a\x0C\x93V[```\0a\x0CN\x85\x85\x85a\x0C\xDEV[\x90Pa\x0C[\x87\x87\x83a\r\xC5V[\x97\x96PPPPPPPV[```\0a\x0CN\x85\x85\x85a\r\xFEV[```\0a\x0CN\x85\x85\x85a\x0E}V[```\0a\x0CN\x85\x85\x85a\x0FEV[```\0a\x0CN\x85\x85\x85a\x0F\xFFV[```\0a\x0CN\x85\x85\x85a\x10}V[```\0a\x0CN\x85\x85\x85a\x10\xF9V[```\0a\x0CN\x85\x85\x85a\x11\x81V[```\0a\x0CN\x85\x85\x85a\x12\nV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x0C\xF6\x91\x90a\x18~V[\x90P`\0a\r\x05`\x08\x83a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\r4W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[`@Q\x80\x91\x03\x90\xFD[c\xFF\xFF\xFF\xFF\x81\x11\x15a\rXW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\rm`\x01`\x01`\xC0\x1B\x03\x19\x89\x16a\x12\x91V[\x90P`\0a\r|\x84` a\x12\xBBV[\x90P`\0a\r\x8B\x84` a\x12\xBBV[\x90P\x81\x81\x8C\x85\x8C`@Q` \x01a\r\xA6\x95\x94\x93\x92\x91\x90a\x18\xF6V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x91\x90R\x9B\x9APPPPPPPPPPPV[```\0\x80\x83Q` \x85\x01\x87\x87\xFA=`@Q` \x81R\x81` \x82\x01R\x81`\0`@\x83\x01>\x82\x80\x15a\r\xF7W\x82`@\x01\x82\xF3[\x82`@\x01\x82\xFD[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x0E\x16\x91\x90a\x18~V[\x90P`\0a\x0E%\x82`\x08a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x0EKW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EoW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\rm\x88`\x07\x0Ba\x12\x91V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x0E\x95\x91\x90a\x18~V[\x90P`\0\x86Q\x82a\x0E\xA6\x91\x90a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\xCCW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xF0W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\x0E\xFD\x83` a\x12\xBBV[\x90P`\0a\x0F\x0C\x83` a\x12\xBBV[\x90P\x81\x81\x8B\x8B\x8B`@Q` \x01a\x0F'\x95\x94\x93\x92\x91\x90a\x18\xF6V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x91\x90R\x9A\x99PPPPPPPPPPV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x0F]\x91\x90a\x18~V[\x90P`\0\x86Q\x82a\x0Fn\x91\x90a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x0F\x94W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xB8W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\x0F\xC6\x87`\x07\x0Ba\x12\x91V[\x90P`\0a\x0F\xD5\x84` a\x12\xBBV[\x90P`\0a\x0F\xE4\x84` a\x12\xBBV[\x90P\x81\x81\x8C\x8C\x86`@Q` \x01a\r\xA6\x95\x94\x93\x92\x91\x90a\x18\xF6V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x10\x17\x91\x90a\x18~V[\x90P`\0\x86Q\x82a\x10(\x91\x90a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x10NW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x10rW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\x0F\xC6\x87a\x13)V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x10\x95\x91\x90a\x18~V[\x90P`\0a\x10\xA4\x82` a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x10\xCAW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\rm\x88a\x13)V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x11\x11\x91\x90a\x18~V[\x90P`\0\x86Q\x82a\x11\"\x91\x90a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x11HW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x11lW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\x0F\xC6`\x01`\x01`\xC0\x1B\x03\x19\x88\x16a\x12\x91V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x11\x99\x91\x90a\x18~V[\x90P`\0\x86Q\x82a\x11\xAA\x91\x90a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x11\xD0W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\x0F\xC6`\x01`\x01`@\x1B\x03\x88\x16`@a\x12\xBBV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x12\"\x91\x90a\x18~V[\x90P`\0a\x121\x82`\x08a\x18~V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x12WW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\x91V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x12{W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\r+\x90a\x18\xC8V[`\0a\rm`\x01`\x01`@\x1B\x03\x89\x16`@a\x12\xBBV[`@\x80Q`\x08\x80\x82R\x81\x83\x01\x90\x92R``\x91` \x82\x01\x81\x806\x837PPP` \x81\x01\x92\x90\x92RP\x90V[``\x81a\xFF\xFF\x16`\x08\x11\x15\x80\x15a\x12\xD8WPa\x01\0\x82a\xFF\xFF\x16\x11\x15[\x80\x15a\x12\xF0WPa\x12\xEA`\x08\x83a\x19wV[a\xFF\xFF\x16\x15[a\x12\xF9W`\0\x80\xFD[a\x13\x05\x82a\x01\0a\x19\x98V[a\xFF\xFF\x16\x92\x90\x92\x1B\x91a\x13\"\x83a\x13\x1D`\x08\x85a\x19\xBAV[a\x13<V[\x93\x92PPPV[``a\x136\x82` a\x13<V[\x92\x91PPV[``` \x82`\xFF\x16\x11\x15a\x13OW`\0\x80\xFD[\x81`\xFF\x16`\x01`\x01`@\x1B\x03\x81\x11\x15a\x13jWa\x13ja\x13\xC8V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x13\x94W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0a\x13\xA4\x83` a\x19\xDBV[a\x13\xAF\x90`\x08a\x19\xF4V[`\0\x19`\xFF\x91\x90\x91\x16\x1B\x93\x90\x93\x16` \x82\x01R\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12a\x13\xEFW`\0\x80\xFD[\x815`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x14\tWa\x14\ta\x13\xC8V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x141Wa\x141a\x13\xC8V[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\x14JW`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x81\x14a\x14\x82W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x14\x9CW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x14\xB3W`\0\x80\xFD[a\x14\xBF\x87\x83\x88\x01a\x13\xDEV[\x94Pa\x14\xCD` \x87\x01a\x14jV[\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x14\xE3W`\0\x80\xFD[Pa\x14\xF0\x86\x82\x87\x01a\x13\xDEV[\x91PP\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x15\x15W\x81\x81\x01Q\x83\x82\x01R` \x01a\x14\xFDV[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x15=\x81`@\x85\x01` \x87\x01a\x14\xFAV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[\x805`\x07\x81\x90\x0B\x81\x14a\x14\x82W`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x15xW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x15\x8FW`\0\x80\xFD[a\x15\x9B\x87\x83\x88\x01a\x13\xDEV[\x94Pa\x14\xCD` \x87\x01a\x15QV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x15\xBEW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x15\xD5W`\0\x80\xFD[a\x15\xE1\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x15\xF7W`\0\x80\xFD[a\x14\xCD\x87\x83\x88\x01a\x13\xDEV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x16\x18W`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x16/W`\0\x80\xFD[a\x16;\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x16QW`\0\x80\xFD[Pa\x16^\x86\x82\x87\x01a\x13\xDEV[\x92PPa\x16m`@\x85\x01a\x15QV[\x90P\x92P\x92P\x92V[`\0\x80`\0``\x84\x86\x03\x12\x15a\x16\x8BW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x16\xA2W`\0\x80\xFD[a\x16\xAE\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x16\xC4W`\0\x80\xFD[Pa\x16\xD1\x86\x82\x87\x01a\x13\xDEV[\x92PP`@\x84\x015\x90P\x92P\x92P\x92V[`\0\x80`\0``\x84\x86\x03\x12\x15a\x16\xF7W`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x17\x0EW`\0\x80\xFD[a\x17\x1A\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x14\xE3W`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x17LW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x17cW`\0\x80\xFD[a\x17o\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x17\x85W`\0\x80\xFD[Pa\x17\x92\x86\x82\x87\x01a\x13\xDEV[\x92PPa\x16m`@\x85\x01a\x14jV[\x805`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x14\x82W`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x17\xCDW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x17\xE4W`\0\x80\xFD[a\x17\xF0\x87\x83\x88\x01a\x13\xDEV[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x18\x06W`\0\x80\xFD[Pa\x18\x13\x86\x82\x87\x01a\x13\xDEV[\x92PPa\x16m`@\x85\x01a\x17\xA1V[`\0\x80`\0``\x84\x86\x03\x12\x15a\x187W`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x18NW`\0\x80\xFD[a\x18Z\x87\x83\x88\x01a\x13\xDEV[\x94Pa\x14\xCD` \x87\x01a\x17\xA1V[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x80\x82\x01\x80\x82\x11\x15a\x136Wa\x136a\x18hV[` \x80\x82R`\x17\x90\x82\x01R\x7Fpubk argument too large\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[` \x80\x82R`\x14\x90\x82\x01Rsa argument too large``\x1B`@\x82\x01R``\x01\x90V[`\0\x86Qa\x19\x08\x81\x84` \x8B\x01a\x14\xFAV[\x86Q\x90\x83\x01\x90a\x19\x1C\x81\x83` \x8B\x01a\x14\xFAV[\x86Q\x91\x01\x90a\x19/\x81\x83` \x8A\x01a\x14\xFAV[\x85Q\x91\x01\x90a\x19B\x81\x83` \x89\x01a\x14\xFAV[\x84Q\x91\x01\x90a\x19U\x81\x83` \x88\x01a\x14\xFAV[\x01\x97\x96PPPPPPPV[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0a\xFF\xFF\x80\x84\x16\x80a\x19\x8CWa\x19\x8Ca\x19aV[\x92\x16\x91\x90\x91\x06\x92\x91PPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\x19\xB3Wa\x19\xB3a\x18hV[P\x92\x91PPV[`\0a\xFF\xFF\x80\x84\x16\x80a\x19\xCFWa\x19\xCFa\x19aV[\x92\x16\x91\x90\x91\x04\x92\x91PPV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x136Wa\x136a\x18hV[`\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\x19\xB3Wa\x19\xB3a\x18hV\xFE\xA2dipfsX\"\x12 \xBD\xDAS\x9C\xA5\xAFN\xC3UuedAe\xFC\xF5\xB8\xB9l\xB8\xF4\x8A{\xFB~\xDF\x87\xE5Z\xD9\xB6\x83dsolcC\0\x08\x13\x003";
    /// The bytecode of the contract.
    pub static COUNTER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80cc\xFF\xAB1\x14a\0\\W\x80c\x83\x81\xF5\x8A\x14a\0zW\x80c\xA2\xC9h\xB4\x14a\0\x82W\x80c\xA9\x1DX\xB4\x14a\0\x97W\x80c\xD0\x9D\xE0\x8A\x14a\0\xAAW[`\0\x80\xFD[a\0da\0\xB2V[`@Qa\0q\x91\x90a\x02\x18V[`@Q\x80\x91\x03\x90\xF3[a\0da\x01@V[a\0\x95a\0\x906`\x04a\x02\xBAV[a\x01MV[\0[a\0\x95a\0\xA56`\x04a\x02\xBAV[a\x01]V[a\0\x95a\x01iV[`\x01\x80Ta\0\xBF\x90a\x03:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\xEB\x90a\x03:V[\x80\x15a\x018W\x80`\x1F\x10a\x01\rWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x018V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0\x80Ta\0\xBF\x90a\x03:V[`\0a\x01Y\x82\x82a\x03\xC3V[PPV[`\x01a\x01Y\x82\x82a\x03\xC3V[`\x02T`@Qcz\xAB\x8E=`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF5W\x1Cz\x90a\x01\x9F\x90`\x01\x90`\0\x90\x82\x90`\x04\x01a\x05\0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\xE4\x91\x90\x81\x01\x90a\x056V[`\0\x90a\x01\xF1\x90\x82a\x03\xC3V[PV[`\0[\x83\x81\x10\x15a\x02\x0FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x01\xF7V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x027\x81`@\x85\x01` \x87\x01a\x01\xF4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x02\x8AWa\x02\x8Aa\x02KV[`@R\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xACWa\x02\xACa\x02KV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02\xCCW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xE3W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x02\xF4W`\0\x80\xFD[\x805a\x03\x07a\x03\x02\x82a\x02\x92V[a\x02aV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x03\x1CW`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03nWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x03\xBEW`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x03\x9BWP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x03\xBAW\x82\x81U`\x01\x01a\x03\xA7V[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xDDWa\x03\xDDa\x02KV[a\x03\xF1\x81a\x03\xEB\x84Ta\x03:V[\x84a\x03tV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x04&W`\0\x84\x15a\x04\x0EWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03\xBAV[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x04UW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x046V[P\x85\x82\x10\x15a\x04sW\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0\x81Ta\x04\x90\x81a\x03:V[\x80\x85R` `\x01\x83\x81\x16\x80\x15a\x04\xADW`\x01\x81\x14a\x04\xC7Wa\x04\xF5V[`\xFF\x19\x85\x16\x88\x84\x01R\x83\x15\x15`\x05\x1B\x88\x01\x83\x01\x95Pa\x04\xF5V[\x86`\0R\x82`\0 `\0[\x85\x81\x10\x15a\x04\xEDW\x81T\x8A\x82\x01\x86\x01R\x90\x83\x01\x90\x84\x01a\x04\xD2V[\x89\x01\x84\x01\x96PP[PPPPP\x92\x91PPV[``\x81R`\0a\x05\x13``\x83\x01\x86a\x04\x83V[\x82\x81\x03` \x84\x01Ra\x05%\x81\x86a\x04\x83V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\0` \x82\x84\x03\x12\x15a\x05HW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05_W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05pW`\0\x80\xFD[\x80Qa\x05~a\x03\x02\x82a\x02\x92V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\x93W`\0\x80\xFD[a\x05\xA4\x82` \x83\x01` \x86\x01a\x01\xF4V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 H\xD6n5\xC5\x8DvC\x87\x14\xCA7\xFFU[\xCE\xF8\xE3\xD8\xFC\xCA4\xEB\xFB$$=N\x04Y0\x13dsolcC\0\x08\x13\x003";
    /// The deployed bytecode of the contract.
    pub static COUNTER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Counter<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Counter<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Counter<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Counter<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Counter<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Counter)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Counter<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    COUNTER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                COUNTER_ABI.clone(),
                COUNTER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `increment` (0xd09de08a) function
        pub fn increment(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 157, 224, 138], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `number` (0x8381f58a) function
        pub fn number(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([131, 129, 245, 138], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `publicKey` (0x63ffab31) function
        pub fn public_key(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([99, 255, 171, 49], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setNumber` (0xa2c968b4) function
        pub fn set_number(
            &self,
            number: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([162, 201, 104, 180], number)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPublicKey` (0xa91d58b4) function
        pub fn set_public_key(
            &self,
            public_key: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([169, 29, 88, 180], public_key)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Counter<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `increment` function with signature `increment()` and selector `0xd09de08a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "increment", abi = "increment()")]
    pub struct IncrementCall;
    ///Container type for all input parameters for the `number` function with signature `number()` and selector `0x8381f58a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "number", abi = "number()")]
    pub struct NumberCall;
    ///Container type for all input parameters for the `publicKey` function with signature `publicKey()` and selector `0x63ffab31`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "publicKey", abi = "publicKey()")]
    pub struct PublicKeyCall;
    ///Container type for all input parameters for the `setNumber` function with signature `setNumber(bytes)` and selector `0xa2c968b4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setNumber", abi = "setNumber(bytes)")]
    pub struct SetNumberCall {
        pub number: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `setPublicKey` function with signature `setPublicKey(bytes)` and selector `0xa91d58b4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setPublicKey", abi = "setPublicKey(bytes)")]
    pub struct SetPublicKeyCall {
        pub public_key: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CounterCalls {
        Increment(IncrementCall),
        Number(NumberCall),
        PublicKey(PublicKeyCall),
        SetNumber(SetNumberCall),
        SetPublicKey(SetPublicKeyCall),
    }
    impl ::ethers::core::abi::AbiDecode for CounterCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <IncrementCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Increment(decoded));
            }
            if let Ok(decoded)
                = <NumberCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Number(decoded));
            }
            if let Ok(decoded)
                = <PublicKeyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::PublicKey(decoded));
            }
            if let Ok(decoded)
                = <SetNumberCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetNumber(decoded));
            }
            if let Ok(decoded)
                = <SetPublicKeyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetPublicKey(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CounterCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Increment(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Number(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::PublicKey(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetNumber(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetPublicKey(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for CounterCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Increment(element) => ::core::fmt::Display::fmt(element, f),
                Self::Number(element) => ::core::fmt::Display::fmt(element, f),
                Self::PublicKey(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetNumber(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetPublicKey(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IncrementCall> for CounterCalls {
        fn from(value: IncrementCall) -> Self {
            Self::Increment(value)
        }
    }
    impl ::core::convert::From<NumberCall> for CounterCalls {
        fn from(value: NumberCall) -> Self {
            Self::Number(value)
        }
    }
    impl ::core::convert::From<PublicKeyCall> for CounterCalls {
        fn from(value: PublicKeyCall) -> Self {
            Self::PublicKey(value)
        }
    }
    impl ::core::convert::From<SetNumberCall> for CounterCalls {
        fn from(value: SetNumberCall) -> Self {
            Self::SetNumber(value)
        }
    }
    impl ::core::convert::From<SetPublicKeyCall> for CounterCalls {
        fn from(value: SetPublicKeyCall) -> Self {
            Self::SetPublicKey(value)
        }
    }
    ///Container type for all return fields from the `number` function with signature `number()` and selector `0x8381f58a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NumberReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `publicKey` function with signature `publicKey()` and selector `0x63ffab31`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PublicKeyReturn(pub ::ethers::core::types::Bytes);
}

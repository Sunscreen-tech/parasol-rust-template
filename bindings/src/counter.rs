pub use counter::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod counter {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("increment"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("increment"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("number"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("number"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("publicKey"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("publicKey"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setNumber"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setNumber"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_number"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setPublicKey"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setPublicKey"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_publicKey"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static COUNTER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\0\x1D\x90a\0_V[`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\09W=`\0\x80>=`\0\xFD[P`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\0lV[a$\xA3\x80a\x06^\x839\x01\x90V[a\x05\xE3\x80a\0{`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80cc\xFF\xAB1\x14a\0\\W\x80c\x83\x81\xF5\x8A\x14a\0zW\x80c\xA2\xC9h\xB4\x14a\0\x82W\x80c\xA9\x1DX\xB4\x14a\0\x97W\x80c\xD0\x9D\xE0\x8A\x14a\0\xAAW[`\0\x80\xFD[a\0da\0\xB2V[`@Qa\0q\x91\x90a\x02\x18V[`@Q\x80\x91\x03\x90\xF3[a\0da\x01@V[a\0\x95a\0\x906`\x04a\x02\xBAV[a\x01MV[\0[a\0\x95a\0\xA56`\x04a\x02\xBAV[a\x01]V[a\0\x95a\x01iV[`\x01\x80Ta\0\xBF\x90a\x03:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\xEB\x90a\x03:V[\x80\x15a\x018W\x80`\x1F\x10a\x01\rWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x018V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0\x80Ta\0\xBF\x90a\x03:V[`\0a\x01Y\x82\x82a\x03\xC3V[PPV[`\x01a\x01Y\x82\x82a\x03\xC3V[`\x02T`@Qcz\xAB\x8E=`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF5W\x1Cz\x90a\x01\x9F\x90`\x01\x90`\0\x90\x82\x90`\x04\x01a\x05\0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\xE4\x91\x90\x81\x01\x90a\x056V[`\0\x90a\x01\xF1\x90\x82a\x03\xC3V[PV[`\0[\x83\x81\x10\x15a\x02\x0FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x01\xF7V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x027\x81`@\x85\x01` \x87\x01a\x01\xF4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x02\x8AWa\x02\x8Aa\x02KV[`@R\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xACWa\x02\xACa\x02KV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02\xCCW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xE3W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x02\xF4W`\0\x80\xFD[\x805a\x03\x07a\x03\x02\x82a\x02\x92V[a\x02aV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x03\x1CW`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03nWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x03\xBEW`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x03\x9BWP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x03\xBAW\x82\x81U`\x01\x01a\x03\xA7V[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xDDWa\x03\xDDa\x02KV[a\x03\xF1\x81a\x03\xEB\x84Ta\x03:V[\x84a\x03tV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x04&W`\0\x84\x15a\x04\x0EWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03\xBAV[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x04UW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x046V[P\x85\x82\x10\x15a\x04sW\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0\x81Ta\x04\x90\x81a\x03:V[\x80\x85R` `\x01\x83\x81\x16\x80\x15a\x04\xADW`\x01\x81\x14a\x04\xC7Wa\x04\xF5V[`\xFF\x19\x85\x16\x88\x84\x01R\x83\x15\x15`\x05\x1B\x88\x01\x83\x01\x95Pa\x04\xF5V[\x86`\0R\x82`\0 `\0[\x85\x81\x10\x15a\x04\xEDW\x81T\x8A\x82\x01\x86\x01R\x90\x83\x01\x90\x84\x01a\x04\xD2V[\x89\x01\x84\x01\x96PP[PPPPP\x92\x91PPV[``\x81R`\0a\x05\x13``\x83\x01\x86a\x04\x83V[\x82\x81\x03` \x84\x01Ra\x05%\x81\x86a\x04\x83V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\0` \x82\x84\x03\x12\x15a\x05HW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05_W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05pW`\0\x80\xFD[\x80Qa\x05~a\x03\x02\x82a\x02\x92V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\x93W`\0\x80\xFD[a\x05\xA4\x82` \x83\x01` \x86\x01a\x01\xF4V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 3\xD2\x8C'\x1A\x81\x8D\xE7\x0B{)VN\x92\xB2I\x174\x1E\xA8\x98x\x07\x07\xB6\xBBY\xBC\0\xBCe\xFBdsolcC\0\x08\x13\x003`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa$\x83\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x07\x01W`\x005`\xE0\x1C\x80c\x80dC\xFA\x11a\x03\x9DW\x80c\xB9>*w\x11a\x01\xE9W\x80c\xDA\xE5\x8D\xF8\x11a\x01\x1AW\x80c\xEB#\x08<\x11a\0\xB8W\x80c\xF51\x06r\x11a\0\x87W\x80c\xF51\x06r\x14a\x0C\xC9W\x80c\xF5W\x1Cz\x14a\x0C\xDCW\x80c\xF7\x04\x80\n\x14a\x0C\xEFW\x80c\xF9\x84\x8FP\x14a\x0C\xFAW`\0\x80\xFD[\x80c\xEB#\x08<\x14a\x0C\x8DW\x80c\xEB*\xF0\x7F\x14a\x0C\xA0W\x80c\xED\xCA+\x83\x14a\x0C\xABW\x80c\xF2\x84\xB4\xDE\x14a\x0C\xBEW`\0\x80\xFD[\x80c\xE4W\xA7G\x11a\0\xF4W\x80c\xE4W\xA7G\x14a\tUW\x80c\xE5Y%\x8A\x14a\x0CoW\x80c\xE7\xD5\xF1Y\x14a\x0C\x82W\x80c\xEAl\x90\x0E\x14a\n-W`\0\x80\xFD[\x80c\xDA\xE5\x8D\xF8\x14a\x0CFW\x80c\xDC\xE9\xE4\xAD\x14a\x0CQW\x80c\xE0\xC7\xFFj\x14a\x0CdW`\0\x80\xFD[\x80c\xC5#\r\xF9\x11a\x01\x87W\x80c\xCDL\xB9\xA5\x11a\x01aW\x80c\xCDL\xB9\xA5\x14a\x0C\x15W\x80c\xD7\x85\xD6+\x14a\n-W\x80c\xD8\xF5jQ\x14a\x0C(W\x80c\xDA\x8B\xDDU\x14a\x0C3W`\0\x80\xFD[\x80c\xC5#\r\xF9\x14a\x0B\xECW\x80c\xC6oI\xCC\x14a\x0B\xFFW\x80c\xCC:\x96\t\x14a\x0C\nW`\0\x80\xFD[\x80c\xBB\xE6R?\x11a\x01\xC3W\x80c\xBB\xE6R?\x14a\x0B\xB8W\x80c\xBFT\xDA\x0C\x14a\x0B\xC3W\x80c\xC1\xF2\x8F\x92\x14a\x0B\xD6W\x80c\xC4x\xF3\x9B\x14a\x0B\xE1W`\0\x80\xFD[\x80c\xB9>*w\x14a\x0B\x7FW\x80c\xBA\x92\x9E\xEC\x14a\x0B\x92W\x80c\xBBL\x13`\x14a\x0B\xA5W`\0\x80\xFD[\x80c\x9F\x89$\x83\x11a\x02\xCEW\x80c\xA4\x1F\x83\xE4\x11a\x02lW\x80c\xB0\x8Eb@\x11a\x02;W\x80c\xB0\x8Eb@\x14a\x0BaW\x80c\xB2a\0G\x14a\x07\xFFW\x80c\xB3\x19\xC9\x03\x14a\tUW\x80c\xB5\xF4\xA2\x18\x14a\x0BlW`\0\x80\xFD[\x80c\xA4\x1F\x83\xE4\x14a\x0B0W\x80c\xAAV\xB2\t\x14a\n-W\x80c\xAC\x004g\x14a\x0BCW\x80c\xACf_\xF0\x14a\x0BNW`\0\x80\xFD[\x80c\xA0iJM\x11a\x02\xA8W\x80c\xA0iJM\x14a\x0B\x1AW\x80c\xA1\t\xA9\xF5\x14a\n-W\x80c\xA271\x1E\x14a\x08\xCDW\x80c\xA3\xA5\xBFv\x14a\x0B%W`\0\x80\xFD[\x80c\x9F\x89$\x83\x14a\x07\xD2W\x80c\x9F\xDF:\xD1\x14a\n\xF4W\x80c\xA0A\x99\x97\x14a\x0B\x07W`\0\x80\xFD[\x80c\x90r\xD5$\x11a\x03;W\x80c\x96\x1CI\xDD\x11a\x03\x15W\x80c\x96\x1CI\xDD\x14a\n\xB8W\x80c\x96I\xF8.\x14a\n\xCBW\x80c\x9A\x89\xDB\xE5\x14a\n\xD6W\x80c\x9E#Zq\x14a\n\xE9W`\0\x80\xFD[\x80c\x90r\xD5$\x14a\n\x97W\x80c\x91k</\x14a\n\xA2W\x80c\x92C\x16\x97\x14a\n\xADW`\0\x80\xFD[\x80c\x8B+d\x11\x11a\x03wW\x80c\x8B+d\x11\x14a\nnW\x80c\x8B\x96=\x9B\x14a\n\x81W\x80c\x8D\\\x17\\\x14a\n\x8CW\x80c\x8F\xF1\x9F:\x14a\x08-W`\0\x80\xFD[\x80c\x80dC\xFA\x14a\nHW\x80c\x83b\xF5)\x14a\nPW\x80c\x8AE\xE6\xA6\x14a\ncW`\0\x80\xFD[\x80c45Q9\x11a\x05\\W\x80cc<\xC7g\x11a\x04\x8DW\x80cm\x0E\xE6\x87\x11a\x04+W\x80cu\x8A\xEE>\x11a\x03\xFAW\x80cu\x8A\xEE>\x14a\n\x0FW\x80cwc\xCA@\x14a\n\x1AW\x80cz\"\x7F\xE2\x14a\n-W\x80c~\r\xBE'\x14a\n5W`\0\x80\xFD[\x80cm\x0E\xE6\x87\x14a\t\xDEW\x80cn\xDF\xD6\x80\x14a\t\xF1W\x80cp\t\x052\x14a\t\xFCW\x80crZ\x87E\x14a\tUW`\0\x80\xFD[\x80cfK4}\x11a\x04gW\x80cfK4}\x14a\t\xACW\x80cge\xEA\xB5\x14a\t\xB7W\x80ci\x13(3\x14a\t\xC2W\x80ci:\xCBC\x14a\t\xD5W`\0\x80\xFD[\x80cc<\xC7g\x14a\t{W\x80cd\xDFF\x05\x14a\t\x8EW\x80cd\xFC2I\x14a\t\x99W`\0\x80\xFD[\x80cQV\x85\x94\x11a\x04\xFAW\x80cZ\x94\xF6\xB0\x11a\x04\xD4W\x80cZ\x94\xF6\xB0\x14a\tBW\x80c]E\xE6\xBA\x14a\tUW\x80c^\x84\xDC\x9C\x14a\t]W\x80cc3\xF1F\x14a\thW`\0\x80\xFD[\x80cQV\x85\x94\x14a\t\tW\x80cS\xCA\xC1!\x14a\t\x1CW\x80cT\xC9P'\x14a\t/W`\0\x80\xFD[\x80cCpC\x81\x11a\x056W\x80cCpC\x81\x14a\x08\xCDW\x80cIau\x1F\x14a\x08\xD8W\x80cL^\x1C\x88\x14a\x08\xE3W\x80cM\xAB\xAE\x9E\x14a\x08\xF6W`\0\x80\xFD[\x80c45Q9\x14a\x08\xA4W\x80c;\xBC\xA8\xE9\x14a\x08\xB7W\x80c@\x1A\x1F}\x14a\x08\xC2W`\0\x80\xFD[\x80c\x1B\xFA\xDE\xED\x11a\x066W\x80c'\xF9\x1A\xD9\x11a\x05\xD4W\x80c,\xD8\xAF\xEE\x11a\x05\xAEW\x80c,\xD8\xAF\xEE\x14a\x08rW\x80c,\xEA;M\x14a\x08{W\x80c-\xF2\xE7\"\x14a\x08\x86W\x80c/^\xB6\x1D\x14a\x08\x99W`\0\x80\xFD[\x80c'\xF9\x1A\xD9\x14a\x08IW\x80c(f\xCF\xFD\x14a\x08TW\x80c)\x16\xCE1\x14a\x08gW`\0\x80\xFD[\x80c!4\xBF\x1A\x11a\x06\x10W\x80c!4\xBF\x1A\x14a\x08\x07W\x80c!\xCF?\x96\x14a\x08\x1AW\x80c$6\xD0\x03\x14a\x08-W\x80c$_1\x1D\x14a\x086W`\0\x80\xFD[\x80c\x1B\xFA\xDE\xED\x14a\x07\xE3W\x80c\x1C>PV\x14a\x07\xF6W\x80c J\x1D\xB7\x14a\x07\xFFW`\0\x80\xFD[\x80c\r\x85\xB4\xF0\x11a\x06\xA3W\x80c\x10\xDA>\\\x11a\x06}W\x80c\x10\xDA>\\\x14a\x07\xB4W\x80c\x13\x15P\x8B\x14a\x07\xBFW\x80c\x14\xAF\x0Cu\x14a\x07\xD2W\x80c\x1Aw\xA8\x82\x14a\x07\xDAW`\0\x80\xFD[\x80c\r\x85\xB4\xF0\x14a\x07\x8BW\x80c\x0E'\xE9E\x14a\x07\x96W\x80c\x0Fu4~\x14a\x07\xA9W`\0\x80\xFD[\x80c\x08\x9F+j\x11a\x06\xDFW\x80c\x08\x9F+j\x14a\x07OW\x80c\tV\x0Ey\x14a\x07bW\x80c\n^N\xD2\x14a\x07mW\x80c\x0C\x9E\xCB`\x14a\x07\x80W`\0\x80\xFD[\x80c\x01(\x98\x10\x14a\x07\x06W\x80c\x04(\xEB%\x14a\x07$W\x80c\x08\x94b\xFE\x14a\x07DW[`\0\x80\xFD[a\x07\x11c\xF0\0\x01\x11\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x077a\x0726`\x04a\x1DQV[a\r\x05V[`@Qa\x07\x1B\x91\x90a\x1D\xE8V[a\x07\x11c\xF0\0\x02\"\x81V[a\x077a\x07]6`\x04a\x1E-V[a\r!V[a\x07\x11c\xF0\0\x03\x01\x81V[a\x077a\x07{6`\x04a\x1EsV[a\r5V[a\x07\x11c\xF1\0\x01\x10\x81V[a\x07\x11c\xF0\0\x02\0\x81V[a\x077a\x07\xA46`\x04a\x1E\xE4V[a\rJV[a\x07\x11c\xF0\0\x03 \x81V[a\x07\x11c\xF0\0\0\x01\x81V[a\x077a\x07\xCD6`\x04a\x1E\xFFV[a\r\xB9V[a\x07\x11` \x81V[a\x07\x11a\x01\0\x81V[a\x077a\x07\xF16`\x04a\x1E-V[a\r\xCDV[a\x07\x11a\x03\0\x81V[a\x07\x11`\x10\x81V[a\x077a\x08\x156`\x04a\x1FrV[a\r\xE1V[a\x077a\x08(6`\x04a\x1EsV[a\x0EGV[a\x07\x11a\x03\xE8\x81V[a\x077a\x08D6`\x04a\x1EsV[a\x0E[V[a\x07\x11c\xF0\0\x03\x10\x81V[a\x077a\x08b6`\x04a\x1F\xD5V[a\x0EoV[a\x07\x11c\xF0\0\x02\x10\x81V[a\x07\x11a\x07\xD0\x81V[a\x07\x11c\xF0\0\x01\"\x81V[a\x077a\x08\x946`\x04a AV[a\x0E\x83V[a\x07\x11c\xF0\0\x01\0\x81V[a\x077a\x08\xB26`\x04a \x96V[a\x0E\x97V[a\x07\x11c\xF0\0\x02\x02\x81V[a\x07\x11c\xF1\0\0\0\x81V[a\x07\x11c\xF0\0\0\0\x81V[a\x07\x11c\xF0\0\x03\x12\x81V[a\x077a\x08\xF16`\x04a \xCAV[a\x0E\xB6V[a\x077a\t\x046`\x04a \x96V[a\x0E\xCAV[a\x077a\t\x176`\x04a\x1E\xFFV[a\x0E\xE2V[a\x077a\t*6`\x04a!4V[a\x0E\xF6V[a\x077a\t=6`\x04a\x1EsV[a\x0F\nV[a\x077a\tP6`\x04a!\x9EV[a\x0F\x1EV[a\x07\x11`\0\x81V[a\x07\x11c\xF0\0\0\x10\x81V[a\x077a\tv6`\x04a \xCAV[a\x0F\x83V[a\x077a\t\x896`\x04a!\xB9V[a\x0F\x97V[a\x07\x11c\xF0\0\0\x12\x81V[a\x077a\t\xA76`\x04a\x1E-V[a\x0F\xABV[a\x07\x11c\xF1\0\0 \x81V[a\x07\x11c\xF0\0\x01\x01\x81V[a\x077a\t\xD06`\x04a AV[a\x0F\xBFV[a\x07\x11a\x02\0\x81V[a\x077a\t\xEC6`\x04a\x1DQV[a\x0F\xD3V[a\x07\x11c\xF0\0\x02\x01\x81V[a\x077a\n\n6`\x04a\x1EsV[a\x0F\xE7V[a\x07\x11c\xF1\0\x02 \x81V[a\x077a\n(6`\x04a \xCAV[a\x0F\xFBV[a\x07\x11`\xC8\x81V[a\x077a\nC6`\x04a\x1EsV[a\x10\x0FV[a\x077a\x10#V[a\x077a\n^6`\x04a\x1EsV[a\x10JV[a\x07\x11c\xF0\0\x01!\x81V[a\x077a\n|6`\x04a!\xFFV[a\x10_V[a\x07\x11c\xF0\0\x01 \x81V[a\x07\x11c\xF0\0\x03\x11\x81V[a\x07\x11c\xF0\0\x03\"\x81V[a\x07\x11c\xF0\0\x02\x12\x81V[a\x07\x11c\xF1\0\0\x10\x81V[a\x077a\n\xC66`\x04a!\xB9V[a\x10\xC4V[a\x07\x11c\xF0\0\x03\0\x81V[a\x077a\n\xE46`\x04a \x96V[a\x10\xD8V[a\x07\x11c\x01\0\0\0\x81V[a\x077a\x0B\x026`\x04a \x96V[a\x10\xF0V[a\x077a\x0B\x156`\x04a\x1FrV[a\x11\x04V[a\x07\x11c\xF0\0\0\"\x81V[a\x07\x11c\xF0\0\x01\x10\x81V[a\x077a\x0B>6`\x04a\x1DQV[a\x11^V[a\x07\x11c\xF0\0\0\x02\x81V[a\x077a\x0B\\6`\x04a\x1E\xFFV[a\x11rV[a\x07\x11c\xF0\0\x03\x02\x81V[a\x077a\x0Bz6`\x04a\x1FrV[a\x11\x86V[a\x077a\x0B\x8D6`\x04a\"\x1AV[a\x11\xE0V[a\x077a\x0B\xA06`\x04a\x1F\xD5V[a\x12EV[a\x077a\x0B\xB36`\x04a\x1EsV[a\x12YV[a\x07\x11c\xF0\0\0 \x81V[a\x077a\x0B\xD16`\x04a!4V[a\x12mV[a\x07\x11c\xF1\0\x03\x10\x81V[a\x07\x11c\xF0\0\x02\x11\x81V[a\x077a\x0B\xFA6`\x04a AV[a\x12\x81V[a\x07\x11c\xF0\0\x02!\x81V[a\x07\x11c\xF0\0\x01\x02\x81V[a\x077a\x0C#6`\x04a\x1EsV[a\x12\x95V[a\x07\x11c\xF0\0\0\x11\x81V[a\x077a\x0CA6`\x04a\x1EsV[a\x12\xA9V[a\x07\x11c\xF0\0\x02 \x81V[a\x077a\x0C_6`\x04a\x1EsV[a\x12\xBDV[a\x07\x11c\xF0\0\x01\x12\x81V[a\x077a\x0C}6`\x04a\x1FrV[a\x12\xD2V[a\x07\x11c\xF0\0\x03!\x81V[a\x077a\x0C\x9B6`\x04a!\xB9V[a\x13,V[a\x07\x11c\xF1\0\x03 \x81V[a\x077a\x0C\xB96`\x04a\x1EsV[a\x13@V[a\x07\x11c\xF1\0\x01 \x81V[a\x077a\x0C\xD76`\x04a!4V[a\x13UV[a\x077a\x0C\xEA6`\x04a\x1F\xD5V[a\x13iV[a\x07\x11c\xF1\0\x02\x10\x81V[a\x07\x11c\xF0\0\0!\x81V[``a\r\x19c\xF0\0\x03\x02`\xC8\x86\x86\x86a\x13}V[\x94\x93PPPPV[``a\r\x19c\xF0\0\x02\x12`\xC8\x86\x86\x86a\x13\xA4V[``a\r\x19c\xF0\0\x01 a\x03\xE8\x86\x86\x86a\x13\xB3V[```\0a\rY3` a\x13\xC2V[\x90P`\0a\rhC` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\r\x7F\x92\x91\x90a\"3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0a\r\x9C\x86\x83a\x14)V[\x90Pa\r\xAFc\xF1\0\x01\x10a\x03\xE8\x83a\x14\xC2V[\x96\x95PPPPPPV[``a\r\x19c\xF0\0\x02!`\xC8\x86\x86\x86a\x14\xFBV[``a\r\x19c\xF0\0\x02\"`\xC8\x86\x86\x86a\x13\xA4V[```\0a\r\xF03` a\x13\xC2V[\x90P`\0a\r\xFFC` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x0E\x16\x92\x91\x90a\"3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x90Pa\x0E;c\xF1\0\x03 a\x07\xD0\x88\x88\x85a\x13\xB3V[\x93PPPP[\x92\x91PPV[``a\r\x19c\xF0\0\x02\0`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\0\0`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\0\x11`\xC8\x86\x86\x86a\x15\nV[``a\r\x19c\xF0\0\0\"`\xC8\x86\x86\x86a\x15\x19V[```\0a\x0E\xA3a\x10#V[\x90Pa\x0E\xAF\x81\x84a\x12\xD2V[\x93\x92PPPV[``a\r\x19c\xF0\0\x03\x11`\xC8\x86\x86\x86a\x15(V[```\0a\x0E\xD6a\x10#V[\x90Pa\x0E\xAF\x81\x84a\x11\x86V[``a\r\x19c\xF0\0\x02\x01`\xC8\x86\x86\x86a\x14\xFBV[``a\r\x19c\xF0\0\x01\x01`\xC8\x86\x86\x86a\x157V[``a\r\x19c\xF0\0\x03\0`\xC8\x86\x86\x86a\x13\xB3V[```\0a\x0F-3` a\x13\xC2V[\x90P`\0a\x0F<C` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x0FS\x92\x91\x90a\"3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0a\x0Fp\x86\x83a\x15FV[\x90Pa\r\xAFc\xF1\0\x03\x10a\x03\xE8\x83a\x14\xC2V[``a\r\x19c\xF0\0\x03\x01`\xC8\x86\x86\x86a\x15(V[``a\r\x19c\xF0\0\x01\"`\xC8\x86\x86\x86a\x15\x93V[``a\r\x19c\xF0\0\x02\x02`\xC8\x86\x86\x86a\x13\xA4V[``a\r\x19c\xF0\0\0\x02`\xC8\x86\x86\x86a\x15\x19V[``a\r\x19c\xF0\0\x03\x12`\xC8\x86\x86\x86a\x13}V[``a\r\x19c\xF0\0\x01\x10`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\x03!`\xC8\x86\x86\x86a\x15(V[``a\r\x19c\xF0\0\0\x10`\xC8\x86\x86\x86a\x13\xB3V[`@\x80Q` \x81\x01\x90\x91R`\0\x80\x82R``\x91a\x10E\x91c\xF1\0\0\0\x91a\x14\xC2V[\x90P\x90V[``a\r\x19c\xF0\0\x03 a\x03\xE8\x86\x86\x86a\x13\xB3V[```\0a\x10n3` a\x13\xC2V[\x90P`\0a\x10}C` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x10\x94\x92\x91\x90a\"3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0a\x10\xB1\x86\x83a\x15\xA2V[\x90Pa\r\xAFc\xF1\0\x02\x10a\x03\xE8\x83a\x14\xC2V[``a\r\x19c\xF0\0\x01\x12`\xC8\x86\x86\x86a\x15\x93V[```\0a\x10\xE4a\x10#V[\x90Pa\x0E\xAF\x81\x84a\r\xE1V[```\0a\x10\xFCa\x10#V[\x90Pa\x0E\xAF\x81\x84[```\0a\x11\x133` a\x13\xC2V[\x90P`\0a\x11\"C` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x119\x92\x91\x90a\"3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x90Pa\x0E;c\xF1\0\x02 a\x07\xD0\x88\x88\x85a\x13\xB3V[``a\r\x19c\xF0\0\x03\"`\xC8\x86\x86\x86a\x13}V[``a\r\x19c\xF0\0\x02\x11`\xC8\x86\x86\x86a\x14\xFBV[```\0a\x11\x953` a\x13\xC2V[\x90P`\0a\x11\xA4C` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x11\xBB\x92\x91\x90a\"3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x90Pa\x0E;c\xF1\0\x01 a\x07\xD0\x88\x88\x85a\x13\xB3V[```\0a\x11\xEF3` a\x13\xC2V[\x90P`\0a\x11\xFEC` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x12\x15\x92\x91\x90a\"3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P`\0a\x122\x86\x83a\x15\xE8V[\x90Pa\r\xAFc\xF1\0\0\x10a\x03\xE8\x83a\x14\xC2V[``a\r\x19c\xF0\0\0!`\xC8\x86\x86\x86a\x15\nV[``a\r\x19c\xF0\0\x03\x10`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\x01\x11`\xC8\x86\x86\x86a\x157V[``a\r\x19c\xF0\0\0\x12`\xC8\x86\x86\x86a\x15\x19V[``a\r\x19c\xF0\0\x02\x10`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\x01\0`\xC8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\x02 a\x03\xE8\x86\x86\x86a\x13\xB3V[```\0a\x12\xE13` a\x13\xC2V[\x90P`\0a\x12\xF0C` a\x13\xC2V[\x90P`\0\x82\x82`@Q` \x01a\x13\x07\x92\x91\x90a\"3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x90Pa\x0E;c\xF1\0\0 a\x07\xD0\x88\x88\x85a\x13\xB3V[``a\r\x19c\xF0\0\x01\x02`\xC8\x86\x86\x86a\x15\x93V[``a\r\x19c\xF0\0\0 a\x03\xE8\x86\x86\x86a\x13\xB3V[``a\r\x19c\xF0\0\x01!`\xC8\x86\x86\x86a\x157V[``a\r\x19c\xF0\0\0\x01`\xC8\x86\x86\x86a\x15\nV[```\0a\x13\x8C\x85\x85\x85a\x16+V[\x90Pa\x13\x99\x87\x87\x83a\x14\xC2V[\x97\x96PPPPPPPV[```\0a\x13\x8C\x85\x85\x85a\x17\tV[```\0a\x13\x8C\x85\x85\x85a\x17\x88V[``\x81a\xFF\xFF\x16`\x08\x11\x15\x80\x15a\x13\xDFWPa\x01\0\x82a\xFF\xFF\x16\x11\x15[\x80\x15a\x13\xF7WPa\x13\xF1`\x08\x83a\"xV[a\xFF\xFF\x16\x15[a\x14\0W`\0\x80\xFD[a\x14\x0C\x82a\x01\0a\"\xAFV[a\xFF\xFF\x16\x92\x90\x92\x1B\x91a\x0E\xAF\x83a\x14$`\x08\x85a\"\xD1V[a\x18PV[``\x80`\x04`\0a\x14;\x82`\x08a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x81\x11\x15a\x14jW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[`@Q\x80\x91\x03\x90\xFD[`\0a\x14\x80`\x01`\x01`@\x1B\x03\x88\x16`\x08a\x13\xC2V[\x90P`\0a\x14\x8F\x83` a\x13\xC2V[\x90P\x80\x82\x88`@Q` \x01a\x14\xA6\x93\x92\x91\x90a#<V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x91\x90R\x98\x97PPPPPPPPV[```\0\x80\x83Q` \x85\x01\x87\x87\xFA=`@Q` \x81R\x81` \x82\x01R\x81`\0`@\x83\x01>\x82\x80\x15a\x14\xF4W\x82`@\x01\x82\xF3[\x82`@\x01\x82\xFD[```\0a\x13\x8C\x85\x85\x85a\x18\xDCV[```\0a\x13\x8C\x85\x85\x85a\x19\x96V[```\0a\x13\x8C\x85\x85\x85a\x1A\x14V[```\0a\x13\x8C\x85\x85\x85a\x1A\x90V[```\0a\x13\x8C\x85\x85\x85a\x1B\x18V[``\x80`\x04`\0a\x15X\x82`\x08a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x81\x11\x15a\x15~W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[`\0a\x14\x80`\x01`\x01`\xC0\x1B\x03\x19\x88\x16a\x1B\xA1V[```\0a\x13\x8C\x85\x85\x85a\x1B\xCBV[``\x80`\x04`\0a\x15\xB4\x82`\x08a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xDAW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[`\0a\x14\x80\x87`\x07\x0Ba\x1CRV[``\x80`\x04`\0a\x15\xFA\x82` a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x81\x11\x15a\x16 W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[`\0a\x14\x80\x87a\x1C\x85V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x16C\x91\x90a\"\xF2V[\x90P`\0a\x16R`\x08\x83a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x16xW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\x9CW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x16\xB1`\x01`\x01`\xC0\x1B\x03\x19\x89\x16a\x1B\xA1V[\x90P`\0a\x16\xC0\x84` a\x13\xC2V[\x90P`\0a\x16\xCF\x84` a\x13\xC2V[\x90P\x81\x81\x8C\x85\x8C`@Q` \x01a\x16\xEA\x95\x94\x93\x92\x91\x90a#\xADV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x91\x90R\x9B\x9APPPPPPPPPPPV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x17!\x91\x90a\"\xF2V[\x90P`\0a\x170\x82`\x08a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x17VW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x17zW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x16\xB1\x88`\x07\x0Ba\x1CRV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x17\xA0\x91\x90a\"\xF2V[\x90P`\0\x86Q\x82a\x17\xB1\x91\x90a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xFBW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x18\x08\x83` a\x13\xC2V[\x90P`\0a\x18\x17\x83` a\x13\xC2V[\x90P\x81\x81\x8B\x8B\x8B`@Q` \x01a\x182\x95\x94\x93\x92\x91\x90a#\xADV[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x91\x90R\x9A\x99PPPPPPPPPPV[``` \x82`\xFF\x16\x11\x15a\x18cW`\0\x80\xFD[\x81`\xFF\x16`\x01`\x01`@\x1B\x03\x81\x11\x15a\x18~Wa\x18~a\x1C\x92V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x18\xA8W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\0a\x18\xB8\x83` a$\x18V[a\x18\xC3\x90`\x08a$1V[`\0\x19`\xFF\x91\x90\x91\x16\x1B\x93\x90\x93\x16` \x82\x01R\x92\x91PPV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x18\xF4\x91\x90a\"\xF2V[\x90P`\0\x86Q\x82a\x19\x05\x91\x90a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x19+W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x19OW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x19]\x87`\x07\x0Ba\x1CRV[\x90P`\0a\x19l\x84` a\x13\xC2V[\x90P`\0a\x19{\x84` a\x13\xC2V[\x90P\x81\x81\x8C\x8C\x86`@Q` \x01a\x16\xEA\x95\x94\x93\x92\x91\x90a#\xADV[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x19\xAE\x91\x90a\"\xF2V[\x90P`\0\x86Q\x82a\x19\xBF\x91\x90a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x19\xE5W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\tW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x19]\x87a\x1C\x85V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x1A,\x91\x90a\"\xF2V[\x90P`\0a\x1A;\x82` a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x1AaW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x85W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x16\xB1\x88a\x1C\x85V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x1A\xA8\x91\x90a\"\xF2V[\x90P`\0\x86Q\x82a\x1A\xB9\x91\x90a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x1A\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x03W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x19]`\x01`\x01`\xC0\x1B\x03\x19\x88\x16a\x1B\xA1V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x1B0\x91\x90a\"\xF2V[\x90P`\0\x86Q\x82a\x1BA\x91\x90a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x1BgW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x8BW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x19]`\x01`\x01`@\x1B\x03\x88\x16`@a\x13\xC2V[`@\x80Q`\x08\x80\x82R\x81\x83\x01\x90\x92R``\x91` \x82\x01\x81\x806\x837PPP` \x81\x01\x92\x90\x92RP\x90V[``\x80`\0`\x08\x90P`\0\x81\x87Qa\x1B\xE3\x91\x90a\"\xF2V[\x90P`\0a\x1B\xF2\x82`\x08a\"\xF2V[\x90Pc\xFF\xFF\xFF\xFF\x82\x11\x15a\x1C\x18W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x05V[c\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C<W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x14a\x90a#\x7FV[`\0a\x16\xB1`\x01`\x01`@\x1B\x03\x89\x16`@a\x13\xC2V[`@\x80Q`\x08\x80\x82R\x81\x83\x01\x90\x92R``\x91`\xC0\x84\x90\x1B\x91\x90` \x82\x01\x81\x806\x837PPP` \x81\x01\x91\x90\x91R\x92\x91PPV[``a\x0EA\x82` a\x18PV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x82`\x1F\x83\x01\x12a\x1C\xB9W`\0\x80\xFD[\x815`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1C\xD3Wa\x1C\xD3a\x1C\x92V[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x1C\xFBWa\x1C\xFBa\x1C\x92V[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\x1D\x14W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x81\x14a\x1DLW`\0\x80\xFD[\x91\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1DfW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1D}W`\0\x80\xFD[a\x1D\x89\x87\x83\x88\x01a\x1C\xA8V[\x94Pa\x1D\x97` \x87\x01a\x1D4V[\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x1D\xADW`\0\x80\xFD[Pa\x1D\xBA\x86\x82\x87\x01a\x1C\xA8V[\x91PP\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x1D\xDFW\x81\x81\x01Q\x83\x82\x01R` \x01a\x1D\xC7V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x1E\x07\x81`@\x85\x01` \x87\x01a\x1D\xC4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[\x805`\x07\x81\x90\x0B\x81\x14a\x1DLW`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1EBW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1EYW`\0\x80\xFD[a\x1Ee\x87\x83\x88\x01a\x1C\xA8V[\x94Pa\x1D\x97` \x87\x01a\x1E\x1BV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1E\x88W`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1E\x9FW`\0\x80\xFD[a\x1E\xAB\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x1E\xC1W`\0\x80\xFD[a\x1D\x97\x87\x83\x88\x01a\x1C\xA8V[\x805`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x1DLW`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a\x1E\xF6W`\0\x80\xFD[a\x0E\xAF\x82a\x1E\xCDV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1F\x14W`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1F+W`\0\x80\xFD[a\x1F7\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a\x1FMW`\0\x80\xFD[Pa\x1FZ\x86\x82\x87\x01a\x1C\xA8V[\x92PPa\x1Fi`@\x85\x01a\x1E\x1BV[\x90P\x92P\x92P\x92V[`\0\x80`@\x83\x85\x03\x12\x15a\x1F\x85W`\0\x80\xFD[\x825`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\x1F\x9CW`\0\x80\xFD[a\x1F\xA8\x86\x83\x87\x01a\x1C\xA8V[\x93P` \x85\x015\x91P\x80\x82\x11\x15a\x1F\xBEW`\0\x80\xFD[Pa\x1F\xCB\x85\x82\x86\x01a\x1C\xA8V[\x91PP\x92P\x92\x90PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1F\xEAW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a \x01W`\0\x80\xFD[a \r\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a #W`\0\x80\xFD[Pa 0\x86\x82\x87\x01a\x1C\xA8V[\x92PP`@\x84\x015\x90P\x92P\x92P\x92V[`\0\x80`\0``\x84\x86\x03\x12\x15a VW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a mW`\0\x80\xFD[a y\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x1D\xADW`\0\x80\xFD[`\0` \x82\x84\x03\x12\x15a \xA8W`\0\x80\xFD[\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a \xBEW`\0\x80\xFD[a\r\x19\x84\x82\x85\x01a\x1C\xA8V[`\0\x80`\0``\x84\x86\x03\x12\x15a \xDFW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a \xF6W`\0\x80\xFD[a!\x02\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a!\x18W`\0\x80\xFD[Pa!%\x86\x82\x87\x01a\x1C\xA8V[\x92PPa\x1Fi`@\x85\x01a\x1D4V[`\0\x80`\0``\x84\x86\x03\x12\x15a!IW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a!`W`\0\x80\xFD[a!l\x87\x83\x88\x01a\x1C\xA8V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a!\x82W`\0\x80\xFD[Pa!\x8F\x86\x82\x87\x01a\x1C\xA8V[\x92PPa\x1Fi`@\x85\x01a\x1E\xCDV[`\0` \x82\x84\x03\x12\x15a!\xB0W`\0\x80\xFD[a\x0E\xAF\x82a\x1D4V[`\0\x80`\0``\x84\x86\x03\x12\x15a!\xCEW`\0\x80\xFD[\x835`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a!\xE5W`\0\x80\xFD[a!\xF1\x87\x83\x88\x01a\x1C\xA8V[\x94Pa\x1D\x97` \x87\x01a\x1E\xCDV[`\0` \x82\x84\x03\x12\x15a\"\x11W`\0\x80\xFD[a\x0E\xAF\x82a\x1E\x1BV[`\0` \x82\x84\x03\x12\x15a\",W`\0\x80\xFD[P5\x91\x90PV[`\0\x83Qa\"E\x81\x84` \x88\x01a\x1D\xC4V[\x83Q\x90\x83\x01\x90a\"Y\x81\x83` \x88\x01a\x1D\xC4V[\x01\x94\x93PPPPV[cNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[`\0a\xFF\xFF\x80\x84\x16\x80a\"\x8DWa\"\x8Da\"bV[\x92\x16\x91\x90\x91\x06\x92\x91PPV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\"\xCAWa\"\xCAa\"\x99V[P\x92\x91PPV[`\0a\xFF\xFF\x80\x84\x16\x80a\"\xE6Wa\"\xE6a\"bV[\x92\x16\x91\x90\x91\x04\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\x0EAWa\x0EAa\"\x99V[` \x80\x82R`\x17\x90\x82\x01R\x7Fpubk argument too large\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`\0\x84Qa#N\x81\x84` \x89\x01a\x1D\xC4V[\x84Q\x90\x83\x01\x90a#b\x81\x83` \x89\x01a\x1D\xC4V[\x84Q\x91\x01\x90a#u\x81\x83` \x88\x01a\x1D\xC4V[\x01\x95\x94PPPPPV[` \x80\x82R`\x14\x90\x82\x01Rsa argument too large``\x1B`@\x82\x01R``\x01\x90V[`\0\x86Qa#\xBF\x81\x84` \x8B\x01a\x1D\xC4V[\x86Q\x90\x83\x01\x90a#\xD3\x81\x83` \x8B\x01a\x1D\xC4V[\x86Q\x91\x01\x90a#\xE6\x81\x83` \x8A\x01a\x1D\xC4V[\x85Q\x91\x01\x90a#\xF9\x81\x83` \x89\x01a\x1D\xC4V[\x84Q\x91\x01\x90a$\x0C\x81\x83` \x88\x01a\x1D\xC4V[\x01\x97\x96PPPPPPPV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EAWa\x0EAa\"\x99V[`\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\"\xCAWa\"\xCAa\"\x99V\xFE\xA2dipfsX\"\x12 s\x98%\xEF\xE0eQ5+Z\"\xA4A\x06\xA1\x08j\xC5&\x11\xFER\xDA#9\xE0p\x91\x9Dh\xE9\xC9dsolcC\0\x08\x13\x003";
    /// The bytecode of the contract.
    pub static COUNTER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80cc\xFF\xAB1\x14a\0\\W\x80c\x83\x81\xF5\x8A\x14a\0zW\x80c\xA2\xC9h\xB4\x14a\0\x82W\x80c\xA9\x1DX\xB4\x14a\0\x97W\x80c\xD0\x9D\xE0\x8A\x14a\0\xAAW[`\0\x80\xFD[a\0da\0\xB2V[`@Qa\0q\x91\x90a\x02\x18V[`@Q\x80\x91\x03\x90\xF3[a\0da\x01@V[a\0\x95a\0\x906`\x04a\x02\xBAV[a\x01MV[\0[a\0\x95a\0\xA56`\x04a\x02\xBAV[a\x01]V[a\0\x95a\x01iV[`\x01\x80Ta\0\xBF\x90a\x03:V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\0\xEB\x90a\x03:V[\x80\x15a\x018W\x80`\x1F\x10a\x01\rWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x018V[\x82\x01\x91\x90`\0R` `\0 \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x01\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`\0\x80Ta\0\xBF\x90a\x03:V[`\0a\x01Y\x82\x82a\x03\xC3V[PPV[`\x01a\x01Y\x82\x82a\x03\xC3V[`\x02T`@Qcz\xAB\x8E=`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xF5W\x1Cz\x90a\x01\x9F\x90`\x01\x90`\0\x90\x82\x90`\x04\x01a\x05\0V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x01\xE4\x91\x90\x81\x01\x90a\x056V[`\0\x90a\x01\xF1\x90\x82a\x03\xC3V[PV[`\0[\x83\x81\x10\x15a\x02\x0FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x01\xF7V[PP`\0\x91\x01RV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x027\x81`@\x85\x01` \x87\x01a\x01\xF4V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x02\x8AWa\x02\x8Aa\x02KV[`@R\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x02\xACWa\x02\xACa\x02KV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[`\0` \x82\x84\x03\x12\x15a\x02\xCCW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x02\xE3W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x02\xF4W`\0\x80\xFD[\x805a\x03\x07a\x03\x02\x82a\x02\x92V[a\x02aV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x03\x1CW`\0\x80\xFD[\x81` \x84\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x03NW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x03nWcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x03\xBEW`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x03\x9BWP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x03\xBAW\x82\x81U`\x01\x01a\x03\xA7V[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xDDWa\x03\xDDa\x02KV[a\x03\xF1\x81a\x03\xEB\x84Ta\x03:V[\x84a\x03tV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x04&W`\0\x84\x15a\x04\x0EWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03\xBAV[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x04UW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x046V[P\x85\x82\x10\x15a\x04sW\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0\x81Ta\x04\x90\x81a\x03:V[\x80\x85R` `\x01\x83\x81\x16\x80\x15a\x04\xADW`\x01\x81\x14a\x04\xC7Wa\x04\xF5V[`\xFF\x19\x85\x16\x88\x84\x01R\x83\x15\x15`\x05\x1B\x88\x01\x83\x01\x95Pa\x04\xF5V[\x86`\0R\x82`\0 `\0[\x85\x81\x10\x15a\x04\xEDW\x81T\x8A\x82\x01\x86\x01R\x90\x83\x01\x90\x84\x01a\x04\xD2V[\x89\x01\x84\x01\x96PP[PPPPP\x92\x91PPV[``\x81R`\0a\x05\x13``\x83\x01\x86a\x04\x83V[\x82\x81\x03` \x84\x01Ra\x05%\x81\x86a\x04\x83V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\0` \x82\x84\x03\x12\x15a\x05HW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05_W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05pW`\0\x80\xFD[\x80Qa\x05~a\x03\x02\x82a\x02\x92V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\x93W`\0\x80\xFD[a\x05\xA4\x82` \x83\x01` \x86\x01a\x01\xF4V[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 3\xD2\x8C'\x1A\x81\x8D\xE7\x0B{)VN\x92\xB2I\x174\x1E\xA8\x98x\x07\x07\xB6\xBBY\xBC\0\xBCe\xFBdsolcC\0\x08\x13\x003";
    /// The deployed bytecode of the contract.
    pub static COUNTER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Counter<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Counter<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Counter<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Counter<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Counter<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Counter)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Counter<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    COUNTER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                COUNTER_ABI.clone(),
                COUNTER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `increment` (0xd09de08a) function
        pub fn increment(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 157, 224, 138], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `number` (0x8381f58a) function
        pub fn number(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([131, 129, 245, 138], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `publicKey` (0x63ffab31) function
        pub fn public_key(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([99, 255, 171, 49], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setNumber` (0xa2c968b4) function
        pub fn set_number(
            &self,
            number: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([162, 201, 104, 180], number)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setPublicKey` (0xa91d58b4) function
        pub fn set_public_key(
            &self,
            public_key: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([169, 29, 88, 180], public_key)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Counter<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `increment` function with signature `increment()` and selector `0xd09de08a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "increment", abi = "increment()")]
    pub struct IncrementCall;
    ///Container type for all input parameters for the `number` function with signature `number()` and selector `0x8381f58a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "number", abi = "number()")]
    pub struct NumberCall;
    ///Container type for all input parameters for the `publicKey` function with signature `publicKey()` and selector `0x63ffab31`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "publicKey", abi = "publicKey()")]
    pub struct PublicKeyCall;
    ///Container type for all input parameters for the `setNumber` function with signature `setNumber(bytes)` and selector `0xa2c968b4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setNumber", abi = "setNumber(bytes)")]
    pub struct SetNumberCall {
        pub number: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `setPublicKey` function with signature `setPublicKey(bytes)` and selector `0xa91d58b4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setPublicKey", abi = "setPublicKey(bytes)")]
    pub struct SetPublicKeyCall {
        pub public_key: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CounterCalls {
        Increment(IncrementCall),
        Number(NumberCall),
        PublicKey(PublicKeyCall),
        SetNumber(SetNumberCall),
        SetPublicKey(SetPublicKeyCall),
    }
    impl ::ethers::core::abi::AbiDecode for CounterCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <IncrementCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Increment(decoded));
            }
            if let Ok(decoded)
                = <NumberCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Number(decoded));
            }
            if let Ok(decoded)
                = <PublicKeyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::PublicKey(decoded));
            }
            if let Ok(decoded)
                = <SetNumberCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetNumber(decoded));
            }
            if let Ok(decoded)
                = <SetPublicKeyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetPublicKey(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CounterCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Increment(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Number(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::PublicKey(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetNumber(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetPublicKey(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for CounterCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Increment(element) => ::core::fmt::Display::fmt(element, f),
                Self::Number(element) => ::core::fmt::Display::fmt(element, f),
                Self::PublicKey(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetNumber(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetPublicKey(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IncrementCall> for CounterCalls {
        fn from(value: IncrementCall) -> Self {
            Self::Increment(value)
        }
    }
    impl ::core::convert::From<NumberCall> for CounterCalls {
        fn from(value: NumberCall) -> Self {
            Self::Number(value)
        }
    }
    impl ::core::convert::From<PublicKeyCall> for CounterCalls {
        fn from(value: PublicKeyCall) -> Self {
            Self::PublicKey(value)
        }
    }
    impl ::core::convert::From<SetNumberCall> for CounterCalls {
        fn from(value: SetNumberCall) -> Self {
            Self::SetNumber(value)
        }
    }
    impl ::core::convert::From<SetPublicKeyCall> for CounterCalls {
        fn from(value: SetPublicKeyCall) -> Self {
            Self::SetPublicKey(value)
        }
    }
    ///Container type for all return fields from the `number` function with signature `number()` and selector `0x8381f58a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NumberReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `publicKey` function with signature `publicKey()` and selector `0x63ffab31`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PublicKeyReturn(pub ::ethers::core::types::Bytes);
}
